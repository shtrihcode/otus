# -*- mode: ruby -*-
# vim: set ft=ruby :

MACHINES = {
:inetRouter => {
      :box_name => "centos/7",
      :net => [
                  {ip: '192.168.255.1', adapter: 2, netmask: "255.255.255.252", virtualbox__intnet: "router-net"}
              ]
},
:inetRouter2 => {
      :box_name => "centos/7",
      :net => [
                  {ip: '192.168.254.1', adapter: 2, netmask: "255.255.255.252", virtualbox__intnet: "router-net2"},
              ]
},
:centralRouter => {
      :box_name => "centos/7",
      :net => [
                  {ip: '192.168.255.2', adapter: 2, netmask: "255.255.255.252", virtualbox__intnet: "router-net"},
                  {ip: '192.168.254.2', adapter: 3, netmask: "255.255.255.252", virtualbox__intnet: "router-net2"},
                  {ip: '192.168.0.1', adapter: 4, netmask: "255.255.255.0", virtualbox__intnet: "central-net"}
              ]
},
:centralServer => {
      :box_name => "centos/7",
      :net => [
                  {ip: '192.168.0.2', adapter: 2, netmask: "255.255.255.0", virtualbox__intnet: "central-net"}
              ]
}
}

Vagrant.configure("2") do |config|

  MACHINES.each do |boxname, boxconfig|

    config.vm.define boxname do |box|

        box.vm.box = boxconfig[:box_name]
        box.vm.host_name = boxname.to_s
        config.vm.provider "virtualbox" do |v|
          v.memory = 256
        end
        boxconfig[:net].each do |ipconf|
          box.vm.network "private_network", ipconf
        end
        if boxconfig.key?(:public)
          box.vm.network "public_network", boxconfig[:public]
        end
        box.vm.provision "shell", inline: <<-SHELL
          mkdir -p ~root/.ssh
                cp ~vagrant/.ssh/auth* ~root/.ssh
        SHELL
        case boxname.to_s
        when "inetRouter"
          box.vm.provision "shell", run: "always", inline: <<-SHELL
            echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
            sysctl -p /etc/sysctl.conf
            systemctl enable firewalld && systemctl start firewalld
            firewall-cmd --zone=public --add-masquerade --permanent
            firewall-cmd --reload
            ip route add 192.168.0.0/16 via 192.168.255.2
            SHELL
       	 when "inetRouter2"
 	        box.vm.provision "shell", run: "always", inline: <<-SHELL
            echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
            sysctl -p /etc/sysctl.conf
            ip route add 192.168.0.0/16 via 192.168.254.2
            systemctl enable firewalld && systemctl start firewalld
            firewall-cmd --zone=public --add-masquerade --permanent
            firewall-cmd --zone=public --add-forward-port=port=80:proto=tcp:toport=8080:toaddr=192.168.0.2 --permanent
            firewall-cmd --reload
            SHELL
        when "centralRouter"
          box.vm.provision "shell", run: "always", inline: <<-SHELL
            echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
            echo "net.ipv4.conf.all.forwarding=1" >> /etc/sysctl.conf
            sysctl -p /etc/sysctl.conf
            ip route add default nexthop via 192.168.255.1 weight 1
            #
            # set multipath routing
            # ip route add default nexthop via 192.168.255.1 weight 1 nexthop via 192.168.254.1 weight 2
            #
            systemctl enable firewalld && systemctl start firewalld
            firewall-cmd --add-masquerade --permanent
            firewall-cmd --permanent --new-ipset=stage1 --type=hash:ip --option=family=inet --option=maxelem=10 --option=timeout=60
            firewall-cmd --permanent --new-ipset=stage2 --type=hash:ip --option=family=inet --option=maxelem=10 --option=timeout=60
            firewall-cmd --permanent --zone=public --direct --remove-rules ipv4 filter all && firewall-cmd --reload
            firewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 0 -i eth3 -m state --state ESTABLISHED,RELATED -j ACCEPT
            firewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 1 -i eth3 -m state --state NEW -m tcp -p tcp --dport 22 -m set --match-set stage2 src -j ACCEPT
            firewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 2 -i eth3 -p icmp -m icmp --icmp-type 8 -m length --length 128 -m limit --limit 10/s -m set --match-set stage1 src -m set ! --match-set stage2 src -j SET --add-set stage2 src
            firewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 3 -i eth3 -p icmp -m icmp --icmp-type 8 -m length --length 128 -m limit --limit 10/s -m set ! --match-set stage1 src -m set ! --match-set stage2 src -j SET --add-set stage1 src
            firewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 4 -i eth3 -p icmp --icmp-type 8 -j ACCEPT
            firewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 5 -i eth3 -j DROP
            firewall-cmd --reload
            sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
            systemctl restart sshd
            SHELL
        when "centralServer"
          box.vm.provision "shell", run: "always", inline: <<-SHELL
            yum -y install epel-release && yum -y install nginx
            sed -i 's/80 default_server/8080 default_server/g' /etc/nginx/nginx.conf
            systemctl enable nginx && systemctl start nginx
            ip route add default via 192.168.0.1
            SHELL
        end
      end
  end
end